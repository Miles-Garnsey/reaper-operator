apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: reapers.reaper.cassandra-reaper.io
spec:
  group: reaper.cassandra-reaper.io
  names:
    kind: Reaper
    listKind: ReaperList
    plural: reapers
    singular: reaper
  scope: Namespaced
  subresources:
    status: {}
  validation:
    openAPIV3Schema:
      description: Reaper is the Schema for the reapers API
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          description: ReaperSpec defines the desired state of Reaper
          properties:
            clusters:
              items:
                properties:
                  name:
                    type: string
                  service:
                    properties:
                      name:
                        type: string
                      namespace:
                        type: string
                    required:
                    - name
                    type: object
                required:
                - name
                - service
                type: object
              type: array
            deploymentConfiguration:
              properties:
                affinity:
                  description: Affinity is a group of affinity scheduling rules.
                  properties:
                    nodeAffinity:
                      description: Describes node affinity scheduling rules for the
                        pod.
                      properties:
                        preferredDuringSchedulingIgnoredDuringExecution:
                          description: The scheduler will prefer to schedule pods
                            to nodes that satisfy the affinity expressions specified
                            by this field, but it may choose a node that violates
                            one or more of the expressions. The node that is most
                            preferred is the one with the greatest sum of weights,
                            i.e. for each node that meets all of the scheduling requirements
                            (resource request, requiredDuringScheduling affinity expressions,
                            etc.), compute a sum by iterating through the elements
                            of this field and adding "weight" to the sum if the node
                            matches the corresponding matchExpressions; the node(s)
                            with the highest sum are the most preferred.
                          items:
                            description: An empty preferred scheduling term matches
                              all objects with implicit weight 0 (i.e. it's a no-op).
                              A null preferred scheduling term matches no objects
                              (i.e. is also a no-op).
                            properties:
                              preference:
                                description: A node selector term, associated with
                                  the corresponding weight.
                                properties:
                                  matchExpressions:
                                    description: A list of node selector requirements
                                      by node's labels.
                                    items:
                                      description: A node selector requirement is
                                        a selector that contains values, a key, and
                                        an operator that relates the key and values.
                                      properties:
                                        key:
                                          description: The label key that the selector
                                            applies to.
                                          type: string
                                        operator:
                                          description: Represents a key's relationship
                                            to a set of values. Valid operators are
                                            In, NotIn, Exists, DoesNotExist. Gt, and
                                            Lt.
                                          type: string
                                        values:
                                          description: An array of string values.
                                            If the operator is In or NotIn, the values
                                            array must be non-empty. If the operator
                                            is Exists or DoesNotExist, the values
                                            array must be empty. If the operator is
                                            Gt or Lt, the values array must have a
                                            single element, which will be interpreted
                                            as an integer. This array is replaced
                                            during a strategic merge patch.
                                          items:
                                            type: string
                                          type: array
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                  matchFields:
                                    description: A list of node selector requirements
                                      by node's fields.
                                    items:
                                      description: A node selector requirement is
                                        a selector that contains values, a key, and
                                        an operator that relates the key and values.
                                      properties:
                                        key:
                                          description: The label key that the selector
                                            applies to.
                                          type: string
                                        operator:
                                          description: Represents a key's relationship
                                            to a set of values. Valid operators are
                                            In, NotIn, Exists, DoesNotExist. Gt, and
                                            Lt.
                                          type: string
                                        values:
                                          description: An array of string values.
                                            If the operator is In or NotIn, the values
                                            array must be non-empty. If the operator
                                            is Exists or DoesNotExist, the values
                                            array must be empty. If the operator is
                                            Gt or Lt, the values array must have a
                                            single element, which will be interpreted
                                            as an integer. This array is replaced
                                            during a strategic merge patch.
                                          items:
                                            type: string
                                          type: array
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                type: object
                              weight:
                                description: Weight associated with matching the corresponding
                                  nodeSelectorTerm, in the range 1-100.
                                format: int32
                                type: integer
                            required:
                            - preference
                            - weight
                            type: object
                          type: array
                        requiredDuringSchedulingIgnoredDuringExecution:
                          description: If the affinity requirements specified by this
                            field are not met at scheduling time, the pod will not
                            be scheduled onto the node. If the affinity requirements
                            specified by this field cease to be met at some point
                            during pod execution (e.g. due to an update), the system
                            may or may not try to eventually evict the pod from its
                            node.
                          properties:
                            nodeSelectorTerms:
                              description: Required. A list of node selector terms.
                                The terms are ORed.
                              items:
                                description: A null or empty node selector term matches
                                  no objects. The requirements of them are ANDed.
                                  The TopologySelectorTerm type implements a subset
                                  of the NodeSelectorTerm.
                                properties:
                                  matchExpressions:
                                    description: A list of node selector requirements
                                      by node's labels.
                                    items:
                                      description: A node selector requirement is
                                        a selector that contains values, a key, and
                                        an operator that relates the key and values.
                                      properties:
                                        key:
                                          description: The label key that the selector
                                            applies to.
                                          type: string
                                        operator:
                                          description: Represents a key's relationship
                                            to a set of values. Valid operators are
                                            In, NotIn, Exists, DoesNotExist. Gt, and
                                            Lt.
                                          type: string
                                        values:
                                          description: An array of string values.
                                            If the operator is In or NotIn, the values
                                            array must be non-empty. If the operator
                                            is Exists or DoesNotExist, the values
                                            array must be empty. If the operator is
                                            Gt or Lt, the values array must have a
                                            single element, which will be interpreted
                                            as an integer. This array is replaced
                                            during a strategic merge patch.
                                          items:
                                            type: string
                                          type: array
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                  matchFields:
                                    description: A list of node selector requirements
                                      by node's fields.
                                    items:
                                      description: A node selector requirement is
                                        a selector that contains values, a key, and
                                        an operator that relates the key and values.
                                      properties:
                                        key:
                                          description: The label key that the selector
                                            applies to.
                                          type: string
                                        operator:
                                          description: Represents a key's relationship
                                            to a set of values. Valid operators are
                                            In, NotIn, Exists, DoesNotExist. Gt, and
                                            Lt.
                                          type: string
                                        values:
                                          description: An array of string values.
                                            If the operator is In or NotIn, the values
                                            array must be non-empty. If the operator
                                            is Exists or DoesNotExist, the values
                                            array must be empty. If the operator is
                                            Gt or Lt, the values array must have a
                                            single element, which will be interpreted
                                            as an integer. This array is replaced
                                            during a strategic merge patch.
                                          items:
                                            type: string
                                          type: array
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                type: object
                              type: array
                          required:
                          - nodeSelectorTerms
                          type: object
                      type: object
                    podAffinity:
                      description: Describes pod affinity scheduling rules (e.g. co-locate
                        this pod in the same node, zone, etc. as some other pod(s)).
                      properties:
                        preferredDuringSchedulingIgnoredDuringExecution:
                          description: The scheduler will prefer to schedule pods
                            to nodes that satisfy the affinity expressions specified
                            by this field, but it may choose a node that violates
                            one or more of the expressions. The node that is most
                            preferred is the one with the greatest sum of weights,
                            i.e. for each node that meets all of the scheduling requirements
                            (resource request, requiredDuringScheduling affinity expressions,
                            etc.), compute a sum by iterating through the elements
                            of this field and adding "weight" to the sum if the node
                            has pods which matches the corresponding podAffinityTerm;
                            the node(s) with the highest sum are the most preferred.
                          items:
                            description: The weights of all of the matched WeightedPodAffinityTerm
                              fields are added per-node to find the most preferred
                              node(s)
                            properties:
                              podAffinityTerm:
                                description: Required. A pod affinity term, associated
                                  with the corresponding weight.
                                properties:
                                  labelSelector:
                                    description: A label query over a set of resources,
                                      in this case pods.
                                    properties:
                                      matchExpressions:
                                        description: matchExpressions is a list of
                                          label selector requirements. The requirements
                                          are ANDed.
                                        items:
                                          description: A label selector requirement
                                            is a selector that contains values, a
                                            key, and an operator that relates the
                                            key and values.
                                          properties:
                                            key:
                                              description: key is the label key that
                                                the selector applies to.
                                              type: string
                                            operator:
                                              description: operator represents a key's
                                                relationship to a set of values. Valid
                                                operators are In, NotIn, Exists and
                                                DoesNotExist.
                                              type: string
                                            values:
                                              description: values is an array of string
                                                values. If the operator is In or NotIn,
                                                the values array must be non-empty.
                                                If the operator is Exists or DoesNotExist,
                                                the values array must be empty. This
                                                array is replaced during a strategic
                                                merge patch.
                                              items:
                                                type: string
                                              type: array
                                          required:
                                          - key
                                          - operator
                                          type: object
                                        type: array
                                      matchLabels:
                                        additionalProperties:
                                          type: string
                                        description: matchLabels is a map of {key,value}
                                          pairs. A single {key,value} in the matchLabels
                                          map is equivalent to an element of matchExpressions,
                                          whose key field is "key", the operator is
                                          "In", and the values array contains only
                                          "value". The requirements are ANDed.
                                        type: object
                                    type: object
                                  namespaces:
                                    description: namespaces specifies which namespaces
                                      the labelSelector applies to (matches against);
                                      null or empty list means "this pod's namespace"
                                    items:
                                      type: string
                                    type: array
                                  topologyKey:
                                    description: This pod should be co-located (affinity)
                                      or not co-located (anti-affinity) with the pods
                                      matching the labelSelector in the specified
                                      namespaces, where co-located is defined as running
                                      on a node whose value of the label with key
                                      topologyKey matches that of any node on which
                                      any of the selected pods is running. Empty topologyKey
                                      is not allowed.
                                    type: string
                                required:
                                - topologyKey
                                type: object
                              weight:
                                description: weight associated with matching the corresponding
                                  podAffinityTerm, in the range 1-100.
                                format: int32
                                type: integer
                            required:
                            - podAffinityTerm
                            - weight
                            type: object
                          type: array
                        requiredDuringSchedulingIgnoredDuringExecution:
                          description: If the affinity requirements specified by this
                            field are not met at scheduling time, the pod will not
                            be scheduled onto the node. If the affinity requirements
                            specified by this field cease to be met at some point
                            during pod execution (e.g. due to a pod label update),
                            the system may or may not try to eventually evict the
                            pod from its node. When there are multiple elements, the
                            lists of nodes corresponding to each podAffinityTerm are
                            intersected, i.e. all terms must be satisfied.
                          items:
                            description: Defines a set of pods (namely those matching
                              the labelSelector relative to the given namespace(s))
                              that this pod should be co-located (affinity) or not
                              co-located (anti-affinity) with, where co-located is
                              defined as running on a node whose value of the label
                              with key <topologyKey> matches that of any node on which
                              a pod of the set of pods is running
                            properties:
                              labelSelector:
                                description: A label query over a set of resources,
                                  in this case pods.
                                properties:
                                  matchExpressions:
                                    description: matchExpressions is a list of label
                                      selector requirements. The requirements are
                                      ANDed.
                                    items:
                                      description: A label selector requirement is
                                        a selector that contains values, a key, and
                                        an operator that relates the key and values.
                                      properties:
                                        key:
                                          description: key is the label key that the
                                            selector applies to.
                                          type: string
                                        operator:
                                          description: operator represents a key's
                                            relationship to a set of values. Valid
                                            operators are In, NotIn, Exists and DoesNotExist.
                                          type: string
                                        values:
                                          description: values is an array of string
                                            values. If the operator is In or NotIn,
                                            the values array must be non-empty. If
                                            the operator is Exists or DoesNotExist,
                                            the values array must be empty. This array
                                            is replaced during a strategic merge patch.
                                          items:
                                            type: string
                                          type: array
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                  matchLabels:
                                    additionalProperties:
                                      type: string
                                    description: matchLabels is a map of {key,value}
                                      pairs. A single {key,value} in the matchLabels
                                      map is equivalent to an element of matchExpressions,
                                      whose key field is "key", the operator is "In",
                                      and the values array contains only "value".
                                      The requirements are ANDed.
                                    type: object
                                type: object
                              namespaces:
                                description: namespaces specifies which namespaces
                                  the labelSelector applies to (matches against);
                                  null or empty list means "this pod's namespace"
                                items:
                                  type: string
                                type: array
                              topologyKey:
                                description: This pod should be co-located (affinity)
                                  or not co-located (anti-affinity) with the pods
                                  matching the labelSelector in the specified namespaces,
                                  where co-located is defined as running on a node
                                  whose value of the label with key topologyKey matches
                                  that of any node on which any of the selected pods
                                  is running. Empty topologyKey is not allowed.
                                type: string
                            required:
                            - topologyKey
                            type: object
                          type: array
                      type: object
                    podAntiAffinity:
                      description: Describes pod anti-affinity scheduling rules (e.g.
                        avoid putting this pod in the same node, zone, etc. as some
                        other pod(s)).
                      properties:
                        preferredDuringSchedulingIgnoredDuringExecution:
                          description: The scheduler will prefer to schedule pods
                            to nodes that satisfy the anti-affinity expressions specified
                            by this field, but it may choose a node that violates
                            one or more of the expressions. The node that is most
                            preferred is the one with the greatest sum of weights,
                            i.e. for each node that meets all of the scheduling requirements
                            (resource request, requiredDuringScheduling anti-affinity
                            expressions, etc.), compute a sum by iterating through
                            the elements of this field and adding "weight" to the
                            sum if the node has pods which matches the corresponding
                            podAffinityTerm; the node(s) with the highest sum are
                            the most preferred.
                          items:
                            description: The weights of all of the matched WeightedPodAffinityTerm
                              fields are added per-node to find the most preferred
                              node(s)
                            properties:
                              podAffinityTerm:
                                description: Required. A pod affinity term, associated
                                  with the corresponding weight.
                                properties:
                                  labelSelector:
                                    description: A label query over a set of resources,
                                      in this case pods.
                                    properties:
                                      matchExpressions:
                                        description: matchExpressions is a list of
                                          label selector requirements. The requirements
                                          are ANDed.
                                        items:
                                          description: A label selector requirement
                                            is a selector that contains values, a
                                            key, and an operator that relates the
                                            key and values.
                                          properties:
                                            key:
                                              description: key is the label key that
                                                the selector applies to.
                                              type: string
                                            operator:
                                              description: operator represents a key's
                                                relationship to a set of values. Valid
                                                operators are In, NotIn, Exists and
                                                DoesNotExist.
                                              type: string
                                            values:
                                              description: values is an array of string
                                                values. If the operator is In or NotIn,
                                                the values array must be non-empty.
                                                If the operator is Exists or DoesNotExist,
                                                the values array must be empty. This
                                                array is replaced during a strategic
                                                merge patch.
                                              items:
                                                type: string
                                              type: array
                                          required:
                                          - key
                                          - operator
                                          type: object
                                        type: array
                                      matchLabels:
                                        additionalProperties:
                                          type: string
                                        description: matchLabels is a map of {key,value}
                                          pairs. A single {key,value} in the matchLabels
                                          map is equivalent to an element of matchExpressions,
                                          whose key field is "key", the operator is
                                          "In", and the values array contains only
                                          "value". The requirements are ANDed.
                                        type: object
                                    type: object
                                  namespaces:
                                    description: namespaces specifies which namespaces
                                      the labelSelector applies to (matches against);
                                      null or empty list means "this pod's namespace"
                                    items:
                                      type: string
                                    type: array
                                  topologyKey:
                                    description: This pod should be co-located (affinity)
                                      or not co-located (anti-affinity) with the pods
                                      matching the labelSelector in the specified
                                      namespaces, where co-located is defined as running
                                      on a node whose value of the label with key
                                      topologyKey matches that of any node on which
                                      any of the selected pods is running. Empty topologyKey
                                      is not allowed.
                                    type: string
                                required:
                                - topologyKey
                                type: object
                              weight:
                                description: weight associated with matching the corresponding
                                  podAffinityTerm, in the range 1-100.
                                format: int32
                                type: integer
                            required:
                            - podAffinityTerm
                            - weight
                            type: object
                          type: array
                        requiredDuringSchedulingIgnoredDuringExecution:
                          description: If the anti-affinity requirements specified
                            by this field are not met at scheduling time, the pod
                            will not be scheduled onto the node. If the anti-affinity
                            requirements specified by this field cease to be met at
                            some point during pod execution (e.g. due to a pod label
                            update), the system may or may not try to eventually evict
                            the pod from its node. When there are multiple elements,
                            the lists of nodes corresponding to each podAffinityTerm
                            are intersected, i.e. all terms must be satisfied.
                          items:
                            description: Defines a set of pods (namely those matching
                              the labelSelector relative to the given namespace(s))
                              that this pod should be co-located (affinity) or not
                              co-located (anti-affinity) with, where co-located is
                              defined as running on a node whose value of the label
                              with key <topologyKey> matches that of any node on which
                              a pod of the set of pods is running
                            properties:
                              labelSelector:
                                description: A label query over a set of resources,
                                  in this case pods.
                                properties:
                                  matchExpressions:
                                    description: matchExpressions is a list of label
                                      selector requirements. The requirements are
                                      ANDed.
                                    items:
                                      description: A label selector requirement is
                                        a selector that contains values, a key, and
                                        an operator that relates the key and values.
                                      properties:
                                        key:
                                          description: key is the label key that the
                                            selector applies to.
                                          type: string
                                        operator:
                                          description: operator represents a key's
                                            relationship to a set of values. Valid
                                            operators are In, NotIn, Exists and DoesNotExist.
                                          type: string
                                        values:
                                          description: values is an array of string
                                            values. If the operator is In or NotIn,
                                            the values array must be non-empty. If
                                            the operator is Exists or DoesNotExist,
                                            the values array must be empty. This array
                                            is replaced during a strategic merge patch.
                                          items:
                                            type: string
                                          type: array
                                      required:
                                      - key
                                      - operator
                                      type: object
                                    type: array
                                  matchLabels:
                                    additionalProperties:
                                      type: string
                                    description: matchLabels is a map of {key,value}
                                      pairs. A single {key,value} in the matchLabels
                                      map is equivalent to an element of matchExpressions,
                                      whose key field is "key", the operator is "In",
                                      and the values array contains only "value".
                                      The requirements are ANDed.
                                    type: object
                                type: object
                              namespaces:
                                description: namespaces specifies which namespaces
                                  the labelSelector applies to (matches against);
                                  null or empty list means "this pod's namespace"
                                items:
                                  type: string
                                type: array
                              topologyKey:
                                description: This pod should be co-located (affinity)
                                  or not co-located (anti-affinity) with the pods
                                  matching the labelSelector in the specified namespaces,
                                  where co-located is defined as running on a node
                                  whose value of the label with key topologyKey matches
                                  that of any node on which any of the selected pods
                                  is running. Empty topologyKey is not allowed.
                                type: string
                            required:
                            - topologyKey
                            type: object
                          type: array
                      type: object
                  type: object
                resources:
                  description: ResourceRequirements describes the compute resource
                    requirements.
                  properties:
                    limits:
                      additionalProperties:
                        type: string
                      description: 'Limits describes the maximum amount of compute
                        resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
                      type: object
                    requests:
                      additionalProperties:
                        type: string
                      description: 'Requests describes the minimum amount of compute
                        resources required. If Requests is omitted for a container,
                        it defaults to Limits if that is explicitly specified, otherwise
                        to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/'
                      type: object
                  type: object
                strategy:
                  description: DeploymentStrategy describes how to replace existing
                    pods with new ones.
                  properties:
                    rollingUpdate:
                      description: 'Rolling update config params. Present only if
                        DeploymentStrategyType = RollingUpdate. --- TODO: Update this
                        to follow our convention for oneOf, whatever we decide it
                        to be.'
                      properties:
                        maxSurge:
                          anyOf:
                          - type: integer
                          - type: string
                          description: 'The maximum number of pods that can be scheduled
                            above the desired number of pods. Value can be an absolute
                            number (ex: 5) or a percentage of desired pods (ex: 10%).
                            This can not be 0 if MaxUnavailable is 0. Absolute number
                            is calculated from percentage by rounding up. Defaults
                            to 25%. Example: when this is set to 30%, the new ReplicaSet
                            can be scaled up immediately when the rolling update starts,
                            such that the total number of old and new pods do not
                            exceed 130% of desired pods. Once old pods have been killed,
                            new ReplicaSet can be scaled up further, ensuring that
                            total number of pods running at any time during the update
                            is at most 130% of desired pods.'
                          x-kubernetes-int-or-string: true
                        maxUnavailable:
                          anyOf:
                          - type: integer
                          - type: string
                          description: 'The maximum number of pods that can be unavailable
                            during the update. Value can be an absolute number (ex:
                            5) or a percentage of desired pods (ex: 10%). Absolute
                            number is calculated from percentage by rounding down.
                            This can not be 0 if MaxSurge is 0. Defaults to 25%. Example:
                            when this is set to 30%, the old ReplicaSet can be scaled
                            down to 70% of desired pods immediately when the rolling
                            update starts. Once new pods are ready, old ReplicaSet
                            can be scaled down further, followed by scaling up the
                            new ReplicaSet, ensuring that the total number of pods
                            available at all times during the update is at least 70%
                            of desired pods.'
                          x-kubernetes-int-or-string: true
                      type: object
                    type:
                      description: Type of deployment. Can be "Recreate" or "RollingUpdate".
                        Default is RollingUpdate.
                      type: string
                  type: object
              type: object
            serverConfig:
              properties:
                autoScheduling:
                  properties:
                    enabled:
                      description: Enables or disables auto scheduling
                      type: boolean
                    excludedKeyspaces:
                      description: The keyspaces that are to be excluded from the
                        repair schedule.
                      items:
                        type: string
                      type: array
                    initialDelayPeriod:
                      description: The duration of the delay before the schedule period
                        starts. Defaults to PT15S (15 seconds)
                      type: string
                    periodBetweenPolls:
                      description: The amount of time to wait before checking whether
                        or not to start a repair task. Defaults to PT10M (10 minutes)
                      type: string
                    scheduleSpreadPeriod:
                      description: The time spacing between each of the repair schedules
                        that is to be carried out. Defaults to PT6H (6 hours)
                      type: string
                    timeBeforeFirstSchedule:
                      description: Grace period before the first repair in the schedule
                        is started. Defaults to PT5M (5 minutes)
                      type: string
                  type: object
                blacklistTwcsTables:
                  description: "Disables repairs of any tables that use either the
                    TimeWindowCompactionStrategy or DateTieredCompactionStrategy.
                    This automatic blacklisting is not stored in schedules or repairs.
                    It is applied when repairs are triggered and visible in the UI
                    for running repairs. Not storing which tables are TWCS/DTCS ensures
                    changes to a table’s compaction strategy are honored on every
                    new repair. \n Note: It is recommended to enable this option as
                    repairing these tables, when they contain TTL’d data, causes overlaps
                    between partitions across the configured time windows the sstables
                    reside in. This leads to an increased disk usage as the older
                    sstables are unable to be expired despite only containing TTL’s
                    data. Repairing DTCS tables has additional issues and is generally
                    not recommended. \n Defaults to false"
                  type: boolean
                cassandraBackend:
                  properties:
                    authProvider:
                      properties:
                        password:
                          type: string
                        type:
                          type: string
                        username:
                          type: string
                      type: object
                    clusterName:
                      type: string
                    contactPoints:
                      description: The headless service that provides endpoints for
                        the Cassandra pods
                      items:
                        type: string
                      type: array
                    keyspace:
                      description: Defaults to reaper
                      type: string
                    replication:
                      description: Specifies the replication strategy for a keyspace
                      properties:
                        networkTopologyStrategy:
                          additionalProperties:
                            format: int32
                            type: integer
                          description: Specifies the replication_factor when NetworkTopologyStrategy
                            is used. The mapping is data center name to RF.
                          type: object
                        simpleStrategy:
                          description: Specifies the replication_factor when SimpleStrategy
                            is used
                          format: int32
                          type: integer
                      type: object
                  required:
                  - clusterName
                  - contactPoints
                  - replication
                  type: object
                enableCrossOrigin:
                  description: "Optional setting which can be used to enable the CORS
                    headers for running an external GUI application. When enabled
                    it will allow REST requests incoming from other origins than the
                    domain that hosts Reaper. \n Defaults to true"
                  type: boolean
                enableDynamicSeedList:
                  description: "Allow Reaper to add all nodes in the cluster as contact
                    points when adding a new cluster, instead of just adding the provided
                    node. \n Defaults to true"
                  type: boolean
                hangingRepairTimeoutMins:
                  description: The amount of time in minutes to wait for a single
                    repair to finish. Defaults to 30. If this timeout is reached,
                    the repair segment in question will be cancelled, if possible,
                    and then scheduled for later repair again within the same repair
                    run process.
                  format: int32
                  type: integer
                incrementalRepair:
                  description: "Sets the default repair type unless specifically defined
                    for each run. Note that this is only supported with the PARALLEL
                    repairParallelism setting. For more details in incremental repair,
                    please refer to the following article http://www.datastax.com/dev/blog/more-efficient-repairs
                    \n Note: It is recommended to avoid using incremental repair before
                    Cassandra 4.0 as subtle bugs can lead to overstreaming and cluster
                    instabililty"
                  type: boolean
                jmxConnectionTimeoutInSeconds:
                  description: "Controls the timeout for establishing JMX connections.
                    The value should be low enough to avoid stalling simple operations
                    in multi region clusters, but high enough to allow connections
                    under normal conditions. \n Defaults to 20"
                  format: int32
                  type: integer
                repairIntensity:
                  description: "Repair intensity defines the amount of time to sleep
                    between triggering each repair segment while running a repair
                    run. When intensity is 1.0, it means that Reaper doesn’t sleep
                    at all before triggering next segment, and otherwise the sleep
                    time is defined by how much time it took to repair the last segment
                    divided by the intensity value. 0.5 means half of the time is
                    spent sleeping, and half running. Intensity 0.75 means that 25%
                    of the total time is used sleeping and 75% running. This value
                    can also be overwritten per repair run when invoking repairs.
                    \n Defaults to 0.9. TODO add validation to ensure the value is
                    a number"
                  type: string
                repairParallelism:
                  description: "Type of parallelism to apply by default to repair
                    runs. The value must be either SEQUENTIAL, PARALLEL, or DATACENTER_AWARE.
                    \n Defaults to DATACENTER_AWARE"
                  type: string
                repairRunThreadCount:
                  description: "The amount of threads to use for handling the Reaper
                    tasks. Have this big enough not to cause blocking in cause some
                    thread is waiting for I/O, like calling a Cassandra cluster through
                    JMX. \n Defaults to 15"
                  format: int32
                  type: integer
                scheduleDaysBetween:
                  description: "Defines the amount of days to wait between scheduling
                    new repairs. The value configured here is the default for new
                    repair schedules, but you can also define it separately for each
                    new schedule. Using value 0 for continuous repairs is also supported.
                    \n Defaults to 7"
                  format: int32
                  type: integer
                segmentCountPerNode:
                  description: "Defines the default amount of repair segments to create
                    for newly registered Cassandra repair runs, for each node in the
                    cluster. When running a repair run by Reaper, each segment is
                    repaired separately by the Reaper process, until all the segments
                    in a token ring are repaired. The count might be slightly off
                    the defined value, as clusters residing in multiple data centers
                    require additional small token ranges in addition to the expected.
                    This value can be overwritten when executing a repair run via
                    Reaper. \n Defaults to 16"
                  format: int32
                  type: integer
                storageType:
                  type: string
              required:
              - cassandraBackend
              type: object
          type: object
        status:
          description: ReaperStatus defines the observed state of Reaper
          properties:
            availableReplicas:
              description: Total number of available pods (ready for at least minReadySeconds)
                targeted by this deployment.
              format: int32
              type: integer
            clusters:
              items:
                properties:
                  name:
                    type: string
                  service:
                    properties:
                      name:
                        type: string
                      namespace:
                        type: string
                    required:
                    - name
                    type: object
                required:
                - name
                - service
                type: object
              type: array
            conditions:
              description: The latest available observations of an object's current
                state.
              items:
                properties:
                  lastProbeTime:
                    description: Last time the condition was checked.
                    format: date-time
                    type: string
                  lastTransitionTime:
                    description: Last time the condition transit from one status to
                      another.
                    format: date-time
                    type: string
                  message:
                    description: Human readable message indicating details about last
                      transition.
                    type: string
                  reason:
                    description: (brief) reason for the condition's last transition.
                    type: string
                  status:
                    description: Status of the condition, one of True, False, Unknown.
                    type: string
                  type:
                    description: Type of reaper condition
                    type: string
                required:
                - status
                - type
                type: object
              type: array
            configuration:
              description: A hash of the latest known Reaper configuration. If the
                hash of Reaper.Spec.ServerConfig differs from this value, it will
                trigger an update of Reaper's configuration file followed by a restart
                of Reaper itself.
              type: string
            readyReplicas:
              description: Total number of ready pods targeted by this deployment.
              format: int32
              type: integer
            replicas:
              description: Total number of non-terminated pods targeted by this deployment
                (their labels match the selector).
              format: int32
              type: integer
            updatedReplicas:
              description: Total number of non-terminated pods targeted by this deployment
                that have the desired template spec.
              format: int32
              type: integer
          type: object
      type: object
  version: v1alpha1
  versions:
  - name: v1alpha1
    served: true
    storage: true
